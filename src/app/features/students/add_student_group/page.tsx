"use client";

import { addDoc, collection } from 'firebase/firestore';
import { useState } from 'react';
import { db } from '../../../../firebase/config';

interface StudentData {
  registrationNumber: string;
  name: string;
  fatherName: string;
}

const allGrades = [
  'ุงูุฃูู ุงูุงุจุชุฏุงุฆู',
  'ุงูุซุงูู ุงูุงุจุชุฏุงุฆู',
  'ุงูุซุงูุซ ุงูุงุจุชุฏุงุฆู',
  'ุงูุฑุงุจุน ุงูุงุจุชุฏุงุฆู',
  'ุงูุฎุงูุณ ุงูุงุจุชุฏุงุฆู',
  'ุงูุณุงุฏุณ ุงูุงุจุชุฏุงุฆู',
  'ุงูุฃูู ุงููุชูุณุท',
  'ุงูุซุงูู ุงููุชูุณุท',
  'ุงูุซุงูุซ ุงููุชูุณุท',
  'ุงูุฑุงุจุน ุงูุนููู',
  'ุงูุฎุงูุณ ุงูุนููู',
  'ุงูุณุงุฏุณ ุงูุนููู',
  'ุงูุฑุงุจุน ุงูุฃุฏุจู',
  'ุงูุฎุงูุณ ุงูุฃุฏุจู',
  'ุงูุณุงุฏุณ ุงูุฃุฏุจู'
];

const sectionLetters = ['ุฃ', 'ุจ', 'ุฌ', 'ุฏ', 'ู', 'ู', 'ุฒ', 'ุญ', 'ุท', 'ู'];

export default function AddStudentGroup() {
  // ุงูุตู ูุงูุดุนุจุฉ ุงููุดุชุฑูุฉ
  const [currentClass, setCurrentClass] = useState('');
  const [currentSection, setCurrentSection] = useState('');

  // ูุฌููุนุฉ ุงูุทูุงุจ
  const [students, setStudents] = useState<StudentData[]>([
    { registrationNumber: '', name: '', fatherName: '' }
  ]);

  // ุฅุถุงูุฉ ุทุงูุจ ุฌุฏูุฏ
  const handleAddStudent = () => {
    setStudents([...students, { registrationNumber: '', name: '', fatherName: '' }]);
  };

  // ุญุฐู ุทุงูุจ
  const handleRemoveStudent = (idx: number) => {
    setStudents(students.filter((_, i) => i !== idx));
  };

  // ุชุบููุฑ ุจูุงูุงุช ุทุงูุจ
  const handleStudentChange = (idx: number, field: keyof StudentData, value: string) => {
    setStudents(students.map((student, i) =>
      i === idx ? { ...student, [field]: value } : student
    ));
  };

  // ุญูุธ ุฌููุน ุงูุทูุงุจ ุฏูุนุฉ ูุงุญุฏุฉ
  const handleSave = async () => {
    if (!currentClass || !currentSection) {
      alert('ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุงูุตู ูุงูุดุนุจุฉ');
      return;
    }
    for (const student of students) {
      if (!student.name || !student.registrationNumber) {
        alert('ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณู ุงูุทุงูุจ ูุฑูู ุงูููุฏ ููู ุทุงูุจ');
        return;
      }
    }
    try {
      const batch = students.map(student => ({
        personalInfo: {
          ...student,
          currentClass,
          currentSection
        },
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }));
      // ุญูุธ ูู ุทุงูุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
      for (const doc of batch) {
        await addDoc(collection(db, 'students'), doc);
      }
      alert('ุชู ุญูุธ ุฌููุน ุงูุทูุงุจ ุจูุฌุงุญ!');
      // ุฅุนุงุฏุฉ ุชุนููู ุงูุญููู
      setStudents([{ registrationNumber: '', name: '', fatherName: '' }]);
      setCurrentClass('');
      setCurrentSection('');
    } catch (error) {
      console.error('Error saving data:', error);
      alert('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงูุจูุงูุงุช');
    }
  };

  return (
    <div className="bg-white min-h-screen">
      <div className="container mx-auto p-4 text-right bg-white text-black" dir="rtl">
        <h1 className="text-3xl font-bold text-black mb-6">ุฅุถุงูุฉ ูุฌููุนุฉ ุทูุงุจ</h1>
        {/* ุงูุตู ูุงูุดุนุจุฉ ูู ุงูุฃุนูู */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
          <div>
            <label className="block mb-2">ุงูุตู ุงูุญุงูู</label>
            <select
              value={currentClass}
              onChange={e => setCurrentClass(e.target.value)}
              className="w-full p-2 border rounded bg-white text-black"
              required
            >
              <option value="">ุงุฎุชุฑ ุงูุตู</option>
              {allGrades.map((grade) => (
                <option key={grade} value={grade}>{grade}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block mb-2">ุงูุดุนุจุฉ ุงูุญุงููุฉ</label>
            <select
              value={currentSection}
              onChange={e => setCurrentSection(e.target.value)}
              className="w-full p-2 border rounded bg-white text-black"
              required
            >
              <option value="">ุงุฎุชุฑ ุงูุดุนุจุฉ</option>
              {sectionLetters.map((letter) => (
                <option key={letter} value={letter}>{letter}</option>
              ))}
            </select>
          </div>
        </div>
        {/* ุญููู ุงูุทูุงุจ */}
        {students.map((student, idx) => (
          <div
            key={idx}
            className="grid grid-cols-12 gap-2 mb-4 items-center border-b pb-4"
          >
            {/* ุนููุฏ ุฑูู ุงูุชุณูุณู ูุฒุฑ ุงูุญุฐู */}
            <div className="col-span-1 flex flex-col items-center justify-center space-y-2">
              <span className="bg-gray-200 rounded-full w-8 h-8 flex items-center justify-center text-black font-bold text-lg">
                {idx + 1}
              </span>
              {students.length > 1 && (
                <button
                  type="button"
                  onClick={() => handleRemoveStudent(idx)}
                  className="text-red-500 text-xl hover:bg-gray-100 rounded-full p-1"
                  title="ุญุฐู ุงูุทุงูุจ"
                >
                  ๐๏ธ
                </button>
              )}
            </div>
            {/* ุงูุญููู */}
            <div className="col-span-3">
              <label className="block mb-1">ุฑูู ุงูููุฏ</label>
              <input
                type="number"
                value={student.registrationNumber}
                onChange={e => handleStudentChange(idx, 'registrationNumber', e.target.value)}
                className="w-full p-2 border rounded bg-white text-black"
                required
              />
            </div>
            <div className="col-span-4">
              <label className="block mb-1">ุงุณู ุงูุทุงูุจ</label>
              <input
                type="text"
                value={student.name}
                onChange={e => handleStudentChange(idx, 'name', e.target.value)}
                className="w-full p-2 border rounded bg-white text-black"
                required
              />
            </div>
            <div className="col-span-4">
              <label className="block mb-1">ุงุณู ุงูุฃุจ ูุดูุฑุชู</label>
              <input
                type="text"
                value={student.fatherName}
                onChange={e => handleStudentChange(idx, 'fatherName', e.target.value)}
                className="w-full p-2 border rounded bg-white text-black"
              />
            </div>
          </div>
        ))}
        {/* ุฒุฑ ุฅุถุงูุฉ ุทุงูุจ ุฌุฏูุฏ */}
        <button
          type="button"
          onClick={handleAddStudent}
          className="mb-6 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 font-bold"
        >
          + ุฅุถุงูุฉ ุทุงูุจ
        </button>
        {/* ุฒุฑ ุญูุธ ุงููุฌููุนุฉ */}
        <button
          onClick={handleSave}
          className="w-full bg-green-500 text-white py-3 rounded hover:bg-green-600 font-bold text-lg"
        >
          ุญูุธ ุจูุงูุงุช ุงูุทูุงุจ
        </button>
      </div>
    </div>
  );
}